//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: mdb.bt
//   Authors: 
//   Version: 0.0.1
//   Purpose: read Valheim map files
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------


LittleEndian();

typedef struct {
    char len;
    if (len > 0) {
        char value[len];
    }
} PString <read=ReadPString, optimize=false>;

string ReadPString( PString &str ) {
    if( exists( str.value ) )
        return str.value;
    else
        return "";
}

typedef struct {
    float x;
    float y;
    float z;
} Pos;


typedef struct {
    float w;
    float x;
    float y;
    float z;
} Quat;

typedef struct {
    uquad stale_pointer; // wild guess
    int entity_id;    // wild guess
    int len;
    char content[len];
} Entity_COPY <optimize=false>;

typedef struct {
    int unknown_b;
    float hit_points;
} PropertyFloat;

// these are pure speculation right now, mostly writing down here so i can try to prove them wrong with test files
typedef enum PropertyType {
    PROP_CREATOR = -1486757002, // 12
    PROP_OTHER_PORTAL_ID = 824179215, // 12
    PROP_SCALE = -528916476, // 16
    PROP_A = -1273338593, // 16, unknown, zeros on dropped item
    PROP_B = 1286941116, // 12
    PROP_C = 197492418, // cloudberries? set to 1 when plucked
    PROP_D = 759487170, // 8 // Cloudberries - maybe sets a timer to reset?
} PropertyType;

// ok so these are three dimensional properties, obviously
// looks like we are basically storing properties on each entity
// according to the data size, but with an identifying property int
// so the one i've observed is object scale
// but i assume this would also be used for other 3-float properties
// if any exist.
typedef struct {
    // int property_name; // i'm keeping note of found values in the PropertyType enum
    PropertyType name;
    float x;
    float y;
    float z;
} PropertyVector;

typedef struct {
    PropertyType name;
    int a;
} PropertyInt;




// may be related to "int a" in entity struct; same values observed in gravestone. otherwise value appears unique in file.
// in other cases, the same value will appear in e.g. 1021 different entity "twelvebytes" values. maybe it links them together?
// ok so second theory - this can defintely be used to link items togetehr somehow. looks like the first int could be a link type enum
// and the rest is dependant on that
// but int b seems to be the other item

typedef struct {
    //int property_name; // i'm keeping note of found values in the PropertyType enum
    PropertyType name;
    int b;
    int c;
} PropertyIntPair;



typedef struct {
    int pre; // test files have c6 10 0a c8 here when followed by base64 encoded string. grave marker has 96 fc 29 49 on its name string
    uchar len;
    local int length = len;
    if (len > 127) { // ie if high bit is set
        char sometimes;
        length += (sometimes - 1) * 128; // only one attestation of this length so may be wildly off
    }
    char payload[length];
} StringPayload <optimize=false>;

typedef struct {
    int a;
    int b;
} ChunkCoord;

typedef struct {
    uquad group_id; // wild guess
    int entity_id;
    int len;
    local uquad end = FTell() + len;
    ChunkCoord two_four;
    char has_more_info; // i've only seen this set to 1
    uquad other_id;
    int a;
    int b;
    int c;
    int d;
    char unknown[2];
    ChunkCoord ef;
    Pos position;
    Quat rotation; // well its four floats at any rate, maybe a quaternion
    char hitpoint_len;
    if (hitpoint_len > 0) {
        PropertyFloat hits[hitpoint_len];
    }
    char third_group_len;
    if (third_group_len > 0) {
        PropertyVector threes[third_group_len];
    } 
    char idk_1;
    if (idk_1 == 1) {
        Printf("Entity # %d had more info (1) to tell at %Lx.\n", entity_id, FTell());
        //local uquad remaining = end - FTell() - 3;
        //Printf("Entity # %d had more info (1) to tell at %Lx, choosing %Ld bytes (has %d health boxes)\n", entity_id, FTell(), remaining, has_health);
        char idk_1_payload[20];
        //sixteen bytes?? idk_1_payload[idk_1];
    } else if (idk_1 != 0) {
        Printf("Entity # %d had more info (1x%x == %x) to tell at %Lx. -> Giving up\n", entity_id, idk_1, third_group_len, FTell());
        char content[end - FTell()];
        return;
    }
    char idk_2;
    if (idk_2 != 0) {
        //Printf("Entity # %d had more info (2) to tell at %Lx.\n", entity_id, FTell());
        PropertyInt idk_2_item[idk_2];
        //int idk_2_a;
        //int idk_2_b;
    }
    char idk_3;
    if (idk_3 != 0) {
        //Printf("Entity # %d had more info (3) to tell at %Lx.\n", entity_id, FTell());
        PropertyIntPair idk_3_payload[idk_3];
    }
    // base64 encoded payload
    char has_payload;
    if (has_payload != 0) {
        Printf("Entity # %d had more info (4) to tell at %Lx.\n", entity_id, FTell());
        //int pre_payload;
        //uchar payload_length;
        //if (payload_length > 127) {
        //    char sometimes;
        //    if (sometimes == 'Z') {
        //        Printf("Entity # %d @ %Lx lacked expected padding that sometimes is there and sometimes not??\n", entity_id, FTell());
        //    }
        //}
        //char payload[payload_length];
        StringPayload payload[has_payload];
    }
    //char content[len - 80]; // - 71 + 8 = -80
// sometimes entities are chests
// if so they have a base64-encoded payload
// seems to be identifiable by the bytes c6 10 0a c8
// preceeding a length byte, and that many bytes of b64 data.
// the data is at the very end of the entity content
    if (FTell() != end) {
        Printf("Entity # %d ended at %Lx instead of %Lx\n", entity_id, FTell(), end);
        return 0;
    }
} Entity <optimize=false>;

typedef struct Blocky(int len) {
    local int length = len;
    char block[len];
} Block <read=readBlock, optimize=false>;

string readBlock(Block &b) {
    string s;
    SPrintf( s, "%x", b.length );
    return s;
}

typedef struct {
    uquad group_id;
    int c;
    uquad shared_id; // is shared between some number of deleted items
} Deleted;


// current hypothosis: these are deleted entity ids.
typedef struct {
    int count;
    Deleted items[count];
} Deleted_Group <optimize = false>;



typedef struct {
    PString name;
    float x;
    float y;
    float z;
    char seen;
} Structure <read=ReadStructure, optimize=false>;

string ReadStructure( Structure &it ) {
    if( exists( it.name.value ) )
        return it.name.value;
    else
        return "";
}

void analyze_records() {
    local int smallest_record = 100000;
    local int largest_record = 0;
    local int64 largest_record_address;
    local int record_count = 0;
    local int marker_value = ReadInt();
    local int64 cursor = FTell() + 4;
    local int64 end = FileSize() - 4;
    local int distance = 0;
    local int test = 0;
    while (cursor < end) {
        test = ReadInt(cursor);
        
        if (test == marker_value) {
            Block record(distance+4);
            Printf("Record Size: %d == 0x%x\n", distance, distance);
            if (distance < smallest_record) {
                smallest_record = distance;
            }
            if (distance > largest_record) {
                largest_record = distance;
                largest_record_address = cursor - distance;
            }
            distance = 0;
            cursor += 4;
            record_count += 1;
        }
        cursor += 1;
        distance += 1;
    }
    Block record(distance+4);
    Printf("found %d records. smallest was %d bytes, largest was %d at 0x%x", record_count, smallest_record, largest_record, largest_record_address);
}

typedef struct {
    PString name <name="name">;
    int quantity;
    float durability;
    int column;
    int row;
    char equipped;
    int quality;
    int unknown_a <bgcolor=cLtYellow>;
    uquad creator_id <name="creator id">;
    PString creator_name <name="creator name">;
} Item;

// found some base64 encoded info in some files
// appears to be contents of chests
// after decoding looks like: 
typedef struct {
    int version; // 103, also appears adjacent to character inventory, either a version tag or a type tag (ie inventory could be component type 103)
    int quantity; // number of items in the chest.
    Item items[quantity] <optimize=false>;
} Chest;

typedef struct {
    int next_id; // appears to be 1 higher than highest id in file, so this follows
    int count;
    Entity entries[count] <name = "entity">;
} Entities;

typedef struct {
    int ninety_nine;
    int twenty_two;
    int some_count;
    PString something[some_count];
} Keys;

typedef struct {
    char one; // probably a bool?
    int count;
    Structure entries[count] <name = "structure">;
} Structures;

typedef struct {
    int version;
    int unknown;
    float time;
    char whatever[8];
} Header;

typedef struct {
    int count;
    ChunkCoord chunks[count];
} Chunks;

typedef struct {
    float float_b;
    char seventeen_zeros[17];
} Footer;

typedef struct {
    Header header <name = "header">;
    Entities entities <name = "entities">;
    Deleted_Group deleted <name = "deleted">;
    Chunks loaded_chunks <name = "loaded chunks">;
    Keys keys<name = "keys">;
    Structures structures <name = "structures">;
    Footer footer <name = "footer">;
} MapFile;

MapFile map;
