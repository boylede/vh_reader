//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: mdb.bt
//   Authors: 
//   Version: 0.0.1
//   Purpose: read Valheim map files
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------


LittleEndian();

typedef struct {
    char len;
    if (len > 0) {
        char value[len];
    }
} PString <read=ReadPString, optimize=false>;

string ReadPString( PString &str ) {
    if( exists( str.value ) )
        return str.value;
    else
        return "";
}

typedef struct {
    float x;
    float y;
    float z;
} Pos;


typedef struct {
    float w;
    float x;
    float y;
    float z;
} Quat;

typedef struct {
    uquad stale_pointer; // wild guess
    int entity_id;    // wild guess
    int len;
    char content[len];
} Entity_COPY <optimize=false>;


typedef enum {
    STATICMESH_ROCK = 1539083309,
} EntityType;

// these are pure speculation right now, mostly writing down here so i can try to prove them wrong with test files
typedef enum PropertyType {
    PROP_CREATOR = -1486757002, // 12
    PROP_OTHER_PORTAL_ID = 824179215, // 12
    PROP_SCALE = -528916476, // 16
    PROP_A = -1273338593, // 16, unknown, zeros on dropped item
    PROP_B = 1286941116, // 12
    PROP_C = 197492418, // cloudberries? set to 1 when plucked
    PROP_D = 759487170, // 8 // Cloudberries - maybe sets a timer to reset?
    PROP_E = -35297356,
    PROP_F = -1563863159,
    PROP_G = 1981281673, // found on gravestones, 1
    PROP_H = -58355724, // found on gravestones, 0
    PROP_BASE64 = -938864442,
    PROP_NAME = 1227488406,
    PROP_FLOATING_NAME = -1778352765, // an extra position value on gravestones    
} PropertyType;
/*
big poppa ids: 
-1876303199
-1876295774
-1876296929

*/


typedef struct {
    PropertyType name;
    float value;
} PropertyFloat <name = "float">;

typedef struct {
    PropertyType name;
    float x;
    float y;
    float z;
} PropertyVector <name = "vector">;

typedef struct {
    PropertyType name;
    int value;
} PropertyInt <name = "int">;

// may be related to "int a" in entity struct; same values observed in gravestone. otherwise value appears unique in file.
// in other cases, the same value will appear in e.g. 1021 different entity "twelvebytes" values. maybe it links them together?
// ok so second theory - this can defintely be used to link items togetehr somehow. looks like the first int could be a link type enum
// and the rest is dependant on that
// but int b seems to be the other item
typedef struct {
    PropertyType name;
    int a;
    int b;
} PropertyIntPair <name = "int pair">;

typedef struct {
    PropertyType name;
    uchar len;
    local int length = len;
    if (len > 127) { // ie if high bit is set
        char sometimes;
        length += (sometimes - 1) * 128; // only one attestation of this length so may be wildly off
    }
    if (length > 0) { // eliminate warnings
        char payload[length];
    }
} PropertyString <optimize=false>;

// chunks appear to cover 64x64 units of space.
// chunk 0,0 covers approx -32 to + 32.
typedef struct {
    int a;
    int b;
} ChunkCoord;

typedef struct {
    int name;
    float a;
    float b;
    float c;
    float d;
} PropertyQuad;

typedef struct {
    uquad group_id; // wild guess
    int entity_id;
    int len;
    local uquad end = FTell() + len;
    int two; // these don't really look like chunk coords
    int four; // maybe simular though.
    char has_more_info; // i've only seen this set to 1
    uquad other_id;
    int a;
    int b;
    int c;
    int d;
    char unknown[2];
    ChunkCoord chunk;
    Pos position;
    Quat rotation; // well its four floats at any rate, maybe a quaternion
    char float_count;
    if (float_count > 0) {
        PropertyFloat hits[float_count];
    }
    char vector_count;
    if (vector_count > 0) {
        PropertyVector property_vector[vector_count];
    } 
    char quad_count;
    if (quad_count > 0) {
        PropertyQuad unk[quad_count];
        //local uquad size = end - FTell();
        Printf("Entity # %d had quads @ %Lx.\n", entity_id, FTell());
    }
    char int_count;
    if (int_count != 0) {
        PropertyInt property_int[int_count];
    }
    char pair_count;
    if (pair_count != 0) {
        PropertyIntPair property_pairs[pair_count];
    }
    char string_count;
    if (string_count != 0) {
        PropertyString payload[string_count];
    }

    if (FTell() != end) {
        Printf("Entity # %d ended at %Lx instead of %Lx\n", entity_id, FTell(), end);
        return 0;
    }
} Entity <optimize=false>;

typedef struct Blocky(int len) {
    local int length = len;
    char block[len];
} Block <read=readBlock, optimize=false>;

string readBlock(Block &b) {
    string s;
    SPrintf( s, "%x", b.length );
    return s;
}

typedef struct {
    uquad group_id;
    int c;
    uquad shared_id; // is shared between some number of deleted items
} Deleted;


// current hypothosis: these are deleted entity ids.
typedef struct {
    int count;
    Deleted items[count];
} Deleted_Group <optimize = false>;



typedef struct {
    PString name;
    float x;
    float y;
    float z;
    char seen;
} Structure <read=ReadStructure, optimize=false>;

string ReadStructure( Structure &it ) {
    if( exists( it.name.value ) )
        return it.name.value;
    else
        return "";
}

void analyze_records() {
    local int smallest_record = 100000;
    local int largest_record = 0;
    local int64 largest_record_address;
    local int record_count = 0;
    local int marker_value = ReadInt();
    local int64 cursor = FTell() + 4;
    local int64 end = FileSize() - 4;
    local int distance = 0;
    local int test = 0;
    while (cursor < end) {
        test = ReadInt(cursor);
        
        if (test == marker_value) {
            Block record(distance+4);
            Printf("Record Size: %d == 0x%x\n", distance, distance);
            if (distance < smallest_record) {
                smallest_record = distance;
            }
            if (distance > largest_record) {
                largest_record = distance;
                largest_record_address = cursor - distance;
            }
            distance = 0;
            cursor += 4;
            record_count += 1;
        }
        cursor += 1;
        distance += 1;
    }
    Block record(distance+4);
    Printf("found %d records. smallest was %d bytes, largest was %d at 0x%x", record_count, smallest_record, largest_record, largest_record_address);
}

typedef struct {
    PString name <name="name">;
    int quantity;
    float durability;
    int column;
    int row;
    char equipped;
    int quality;
    int unknown_a <bgcolor=cLtYellow>;
    uquad creator_id <name="creator id">;
    PString creator_name <name="creator name">;
} Item;

// found some base64 encoded info in some files
// appears to be contents of chests
// after decoding looks like: 
typedef struct {
    int version; // 103, also appears adjacent to character inventory, either a version tag or a type tag (ie inventory could be component type 103)
    int quantity; // number of items in the chest.
    Item items[quantity] <optimize=false>;
} Chest;

typedef struct {
    int next_id; // appears to be 1 higher than highest id in file, so this follows
    int count;
    Entity entries[count] <name = "entity">;
} Entities;

typedef struct {
    int ninety_nine;
    int twenty_two;
    int count;
    if (count > 0) {
        PString keys[count];
    }
} Keys;

typedef struct {
    char one; // probably a bool?
    int count;
    Structure entries[count] <name = "structure">;
} Structures;

typedef struct {
    int version;
    int unknown;
    float time;
    char whatever[8];
} Header;

typedef struct {
    int count;
    ChunkCoord chunks[count];
} Chunks;

typedef struct {
    float float_b;
    char seventeen_zeros[17];
} Footer;

typedef struct {
    Header header <name = "header">;
    Entities entities <name = "entities">;
    Deleted_Group deleted <name = "deleted">;
    Chunks loaded_chunks <name = "loaded chunks">;
    Keys keys<name = "keys">;
    Structures structures <name = "structures">;
    Footer footer <name = "footer">;
} MapFile;

MapFile map;
