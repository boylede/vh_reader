//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

LittleEndian();

typedef struct {
    char len;
    if (len > 0) {
        char value[len];
    }
} PString <read=ReadPString>;

string ReadPString( PString &str ) {
    if( exists( str.value ) )
        return str.value;
    else
        return "";
}

typedef struct fileHeader {
    int data_length <format=hex, name = "data length">; 
    int thirty_tree;
    int unknown;
    int deaths;
    int crafts;
    int builds;
    int map_count <name = "Map count">;
} fileHeader;

typedef struct {
    int length;
    char hash[length] <format=decimal>; ;
} Hash;

typedef struct {
    PString name;
    float x;
    float y; // always zero?
    float z;
    char type; // an enum for the icon.
    int flags; // bit 24 should be if the icon is crossed out.
} POI <read=ReadPOI>;

string ReadPOI( POI &it ) {
    if( exists( it.name.value ) )
        return it.name.value;
    else
        return "";
}

typedef struct mapPOIs {
    int count;
    POI entries[count] <optimize=false, name="poi">;
} mapPOIs;


typedef struct {
    int four;
    int chunk_size; // assumption based on empirical analysis
    FSkip(400000h);
    //analyze_map_chunks(chunk_size, 400000h);
} VisibilityData;

string ReadVisibilty( VisibilityData &vis ) {
    float max = 4194296.0;
    string s;   
    SPrintf( s, "%f percent seen", (vis.seen * 100) / max);
    return s;
}

typedef struct {
    float x;
    float y;
    float z;
} Triple;

typedef struct Map {
    char unknown_a[9] <bgcolor=cLtYellow>;
    Triple unknown_triple_a <bgcolor=cYellow>;
    char unknown_byte_a <bgcolor=cYellow>;
    Triple current_location;
    char unknown_byte_b <bgcolor=cYellow>;
    Triple unknown_triple_b <bgcolor=cYellow>;
    Triple unknown_triple_c <bgcolor=cYellow>;
    char unknown_byte_c <bgcolor=cYellow>;
    int map_size;
    local int map_end = FTell() + map_size;
    
    VisibilityData fog_of_war <name="fog of war">;
    mapPOIs pois;
    if (FTell() != map_end) {
        char padding;
    }
} Map;

void skip_maps(void) {
    local int skipped;
    local int skipping = 1;
    local char value;

    while (skipping == 1) {
        value = ReadByte();
        if (value == 0 || value == 1) {
            FSkip(1);
            skipped += 1;
        } else {
            skipping = 0;
        }
    }
    Printf("Skipped 0x%x bytes of \"map data\"\n", skipped);
};

void analyze_maps(int length) {
    local int skipped;
    local int skipping = 1;
    local char value;
    local int current_region_type = 0;
    local int64 region_start = FTell();
    local int64 region_end = region_start;
    local int counted = 0;

    while (skipping == 1) {
        value = ReadByte();
        if (skipped < length) {
            if (value != current_region_type) {
                region_end = FTell();
                Printf("Found new 0x%Lx-byte region of %d's at 0x%Lx\n", region_end - region_start, current_region_type, region_start);
                counted += region_end - region_start;                
                region_start = region_end;
                regions += 1;
                current_region_type = value;
                char chunk_start;
            } else {
                skipped += 1;
                FSkip(1);
            }

        } else {
            region_end = FTell();
            Printf("Found new 0x%Lx-byte region of %d's at 0x%Lx\n", region_end - region_start, current_region_type, region_start);
            regions += 1;
            skipping = 0;
            counted += region_end - region_start;
        }
    }
    
    Printf("Skipped 0x%x, found %d regions. debug: %x, %x\n", length, regions, skipped, counted);
};

void analyze_map_chunks(int size, int length) {
    //local int bytes_read = 0;
    //local int done = 0;
    //local char value;
//    local int current_region_type = 0;
    //local int64 region_start = FTell();
    //local int64 region_end = region_start;
    //local int counted = 0;
    local int file = FileNew("Hex", false);
    //DisableUndo();
    local int region;
    local int byt;
    local int value;
    local int found_ones;
    local int found_zeros;
    local int line_length = 4 * size;
    local char line[line_length];
    FPrintf(file, "P6\n%d %d\n255\n", size, size);
    for (region = 0; region < 2048; region++) {
        Memset(line, 0, line_length);
        // Printf("writing region %d\n", region);
        found_ones = 0;
        found_zeros = 0;
        for (byt = 0; byt < 2048; byt++) {
            // if (!found_ones) {
            value = ReadByte();

            if (value == 0) {
                found_zeros += 1;
                Strcat(line, "   ");
                // FPrintf(file, "%c%c%c", 254, 254, 254);
                // FPrintf(file, "   ");
            } else {
                found_ones += 1;
                //Strcat(s, "1");
                Strcat(line, "~~~");
                // FPrintf(file, "%c%c%c", 1, 1, 1);
                // FPrintf(file, "~~~");
            }
            // }
            FSkip(1);
        }
        FPrintf(file, "%s", line);
        if (found_ones != 0) {
            // Printf("Found %d set bytes in region %d at address %Lx, had size %d\n", found_ones, region, FTell(), found_ones + found_zeros);
        }
    }
    // Printf("Skipped 0x%x, found %d regions. debug: %x, %x\n", length, regions, skipped, counted);
};


typedef struct {
    PString name <name="name">;
    int quantity;
    float durability;
    int column;
    int row;
    char equipped;
    int quality;
    int unknown_a <bgcolor=cLtYellow>;
    uquad creator_id <name="creator id">;
    PString creator_name <name="creator name">;
} Item;

string ReadItem( Item &it ) {
    if( exists( it.name.value ) )
        return it.name.value;
    else
        return "";
}

typedef struct Inventory {
    int len;
    Item items[len] <name="item",optimize=false, read=ReadItem>;
} Inventory;

typedef struct {
    PString name;
    int max_grade;
} UpgradableEntry;

typedef struct {
    PString name;
    PString text;
} PStringPair;


typedef struct {
    int len;
    if (len > 0) {
        PString entries[len] <optimize=false>;
    }
} PStringList;

typedef enum Biomes {
    BIOME_MEADOWS = 1,
    BIOME_BLACKFOREST = 8
} Biomes;

typedef struct {
    PStringList items_seen;
    
    int len2;
    UpgradableEntry craftbenches_seen[len2] <optimize=false>;

    PStringList recipe_list;

    PStringList places;
    PStringList unknown_list;

    PStringList trophies;

    int biomes_seen;
    Biomes biomes[biomes_seen];

    int len8;
    PStringPair tutorials[len8] <optimize=false>;
} Compendium <name="Compendium">;

typedef struct {
    PString name;
    float health;
    float stamina;
} Food <read=ReadFood>;

string ReadFood( Food &it ) {
    if( exists( it.name.value ) )
        return it.name.value;
    else
        return "";
}

typedef enum SkillName {
    SKILL_SWORDS = 1,
    SKILL_KNIVES = 2,
    SKILL_CLUBS = 3,
    SKILL_POLEARMS = 4,
    SKILL_SPEARS = 5,
    SKILL_BLOCKING = 6,
    SKILL_AXES = 7,
    SKILL_BOWS = 8,
    // 9
    // 10
    SKILL_UNARMED = 11,
    SKILL_PICKAXES = 12,
    SKILL_WOODCUTTING = 13,
    // SKIP A FEW..?
    SKILL_JUMP = 100,
    SKILL_SNEAK = 101,
    SKILL_RUN = 102,
    SKILL_SWIM = 103
} SkillName;

typedef struct {
    SkillName id;
    float level;
    float progress <name="progress", comment="percentage of progress, next level is reached at 100.0">;
} Skill <read=ReadSkill>;

string ReadSkill ( Skill &sk ) {
    return EnumToString(sk.id);
}

typedef struct {
    PString name <name="name">;
    uquad player_id <name="player id">;
    char unknown_aa[10] <bgcolor=cLtYellow>; // never seems to change
    float max_hp <name="max hp">;
    float current_hp <name="current hp">; // value appears to be recalculated at launch
    float stamina <name="stamina">;
    char unknown_ab <bgcolor=cYellow>;
    float unknown_counter <bgcolor=cYellow>;
    PString selected_gp <name="selected god power">;
    char unknown_b[8] <bgcolor=cYellow>;
    Inventory inventory <name="inventory">;
    Compendium compendium;

    PString beard <name="beard">;
    PString hair <name="hair">;
    float float1 <bgcolor=cYellow>; // these 3 are all the same on new character
    float float2 <bgcolor=cYellow>; // these 3 are all the same on new character
    float float3 <bgcolor=cYellow>; // these 3 are all the same on new character
    float float4 <bgcolor=cYellow>;
    float float5 <bgcolor=cYellow>;
    float float6 <bgcolor=cYellow>;
    int gender;
    int food_count;
    Food foods[food_count] <optimize=false, name="food">;
    int two <bgcolor=cLtYellow>;
    int skill_count;
    Skill skills[skill_count] <name="Skill">;
    
} Character <read=ReadCharacter>;

string ReadCharacter( Character &cha ) {
    if( exists( cha.name.value ) )
        return cha.name.value;
    else
        return "";
}

typedef struct ChacterFile {
    fileHeader header <name="File Header">;
    Map maps[header.map_count] <optimize=false, name="Maps">;
    Character character <name="Character">;
    Hash hash <name="Hash">;
} CharacterFile <name="Character File">;;


CharacterFile file;
